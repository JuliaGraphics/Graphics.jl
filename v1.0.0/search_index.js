var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference-1","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Geometric-primitives-1","page":"Reference","title":"Geometric primitives","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"Vec2\nPoint\nBoundingBox","category":"page"},{"location":"reference/#Graphics.Vec2","page":"Reference","title":"Graphics.Vec2","text":"Vec2(x, y) -> v\n\nCreate a Cartesian representation v of a vector (or point) in two dimensions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Graphics.Point","page":"Reference","title":"Graphics.Point","text":"Point(x, y) -> p\n\nCreate a Cartesian representation p of a point in two dimensions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Graphics.BoundingBox","page":"Reference","title":"Graphics.BoundingBox","text":"BoundingBox(xmin, xmax, ymin, ymax) -> bb\n\nCreate a representation bb of a rectangular region, specifying the coordinates of the horizontal (x) and vertical (y) edges.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Geometry-API-1","page":"Reference","title":"Geometry API","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"aspect_ratio\ncenter\ndeform\ndiagonal\nisinside\nshift\nheight\nwidth\nxmin\nxmax\nymin\nymax\nxrange\nyrange","category":"page"},{"location":"reference/#Graphics.aspect_ratio","page":"Reference","title":"Graphics.aspect_ratio","text":"aspect_ratio(bb::BoundingBox) -> r\n\nCompute the ratio r of the height and width of bb.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Graphics.deform","page":"Reference","title":"Graphics.deform","text":"deform(bb::BoundingBox, Δl, Δr, Δt, Δb) -> bbnew\n\nAdd Δl (left), Δr (right), Δt (top), and Δb (bottom) to the edges of a BoundingBox.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Graphics.isinside","page":"Reference","title":"Graphics.isinside","text":"isinside(bb::BoundingBox, p::Point) -> tf::Bool\nisinside(bb::BoundingBox, x, y) -> tf::Bool\n\nDetermine whether the point lies within bb.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Graphics.shift","page":"Reference","title":"Graphics.shift","text":"shift(bb::BoundingBox, Δx, Δy) -> bbnew\n\nShift center by (Δx,Δy), keeping width & height fixed.\n\n\n\n\n\n","category":"function"},{"location":"reference/#d-drawing-contexts-1","page":"Reference","title":"2d drawing contexts","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"GraphicsDevice\nGraphicsContext\ncreategc\ngetgc","category":"page"},{"location":"reference/#Coordinate-systems-1","page":"Reference","title":"Coordinate systems","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"set_coordinates\nreset_transform\nrotate\nscale\ntranslate\nuser_to_device!\ndevice_to_user!\nuser_to_device_distance!\ndevice_to_user_distance!\nuser_to_device\ndevice_to_user","category":"page"},{"location":"reference/#Graphics.set_coordinates","page":"Reference","title":"Graphics.set_coordinates","text":"set_coordinates(c::GraphicsContext, device::BoundingBox, user::BoundingBox)\nset_coordinates(c::GraphicsContext, user::BoundingBox)\n\nSet the device->user coordinate transformation of c so that device, expressed in \"device coordinates\" (pixels), is equivalent to user as expressed in \"user coordinates\". If device is omitted, it defaults to the full span of c, BoundingBox(0, width(c), 0, height(c)).\n\nSee also get_matrix, set_matrix.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Graphics.rotate","page":"Reference","title":"Graphics.rotate","text":"rotate(p::Vec2, angle::Real, o::Vec2) -> pnew\n\nRotate p around o by angle.\n\n\n\n\n\nrotate(bb::BoundingBox, angle, o) -> bbnew\n\nRotate bb around o by angle, returning the BoundingBox that encloses the vertices of the rotated box.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Lines-1","page":"Reference","title":"Lines","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"set_line_width\nset_dash","category":"page"},{"location":"reference/#Colors-and-painting-(drawing-attributes)-1","page":"Reference","title":"Colors and painting (drawing attributes)","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"set_source\nset_source_rgb\nset_source_rgba\nsave\nrestore","category":"page"},{"location":"reference/#Clipping-1","page":"Reference","title":"Clipping","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"clip\nclip_preserve\nreset_clip\ninner_canvas","category":"page"},{"location":"reference/#Graphics.inner_canvas","page":"Reference","title":"Graphics.inner_canvas","text":"inner_canvas(c::GraphicsContext, device::BoundingBox, user::BoundingBox)\ninner_canvas(c::GraphicsContext, x, y, w, h, l, r, t, b)\n\nCreate a rectangular drawing area inside device (represented in device-coordinates), giving it user-coordinates user. Any drawing that occurs outside this box is clipped.\n\nx, y, w, and h are an alternative parametrization of device, and l, r, t, b parametrize user.\n\nSee also: set_coordinates.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Paths-1","page":"Reference","title":"Paths","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"move_to\nline_to\nrel_line_to\nrel_move_to\nnew_path\nnew_sub_path\nclose_path\narc","category":"page"},{"location":"reference/#High-level-paths-1","page":"Reference","title":"High-level paths","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"rectangle\ncircle\npolygon","category":"page"},{"location":"reference/#Fill-and-stroke-1","page":"Reference","title":"Fill and stroke","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"fill\nfill_preserve\npaint\nstroke\nstroke_preserve\nstroke_transformed\nstroke_transformed_preserve","category":"page"},{"location":"#Graphics.jl-1","page":"Graphics.jl","title":"Graphics.jl","text":"","category":"section"},{"location":"#","page":"Graphics.jl","title":"Graphics.jl","text":"Graphics.jl is an abstraction layer for graphical operations in Julia. Its goal is to allow developers to write graphical programs in a manner independent of the particular graphical backend. One needs to load a backend package that implements the operations in its API; currently, Cairo.jl is the only such backend.","category":"page"},{"location":"#","page":"Graphics.jl","title":"Graphics.jl","text":"To get an organized overview of the API, try typing ?Graphics at the Julia REPL. You can see the same information in greater detail on the next page.","category":"page"}]
}
